library(ISwR)
caesar.shoe
caesar.shoe.yes <- caesar.shoe["Yes",]
caesar.shoe.total <- margin.table(caesar.shoe, 2)
margin.table(caesar.shoe, 2)
prop.test(caesar.shoe.yes, caesar.shoe.total)
prop.trend.test(caesar.shoe.yes, caesar.shoe.total)
plot(caesar.shoe.yes, caesar.shoe.total)
corr(caesar.shoe.yes, caesar.shoe.total)
cor(caesar.shoe.yes, caesar.shoe.total)
chisq.test(lewitt.machin)
caff.marital <- matrix(c(652,1537,598,242,36,46,38,21,218, 327, 106, 67))
caff.marital <- matrix(c(652,1537,598,242,36,46,38,21,
218, 327, 106, 67),
nrow=3,
byrow=TRUE)
dbinom(x=3, size=10, prob=1/5)
dpois(x=3, lambda=10*1/5)
1-pbinom(q=2, size=5, prob=0.3)
1-ppois(q=2, lambda=5*0.3)
5*0.3
curve(dbinom(x, size=5, prob=0.3), xlim=c(-10, 10))
curve(dbinom(x, size=5, prob=0.3), xlim=c(-10, 10), type="h")
curve(dbinom(x, size=5, prob=0.3), xlim=c(-10, 10), type="b")
curve(dbinom(x, size=5, prob=0.3), xlim=c(-10, 10), type="c")
curve(dbinom(x, size=5, prob=0.3), xlim=c(-10, 10), pch=15)
plot(dbinom(x, size=5, prob=0.3), xlim=c(-10, 10), pch=15)
plot(x, dbinom(x, size=5, prob=0.3), xlim=c(-10, 10), pch=15)
x <- -2:7
plot(x, dbinom(x, size=5, prob=0.3), pch=15)
plot(x, dbinom(x, size=5, prob=0.3), pch=1)
plot(x, dbinom(x, size=5, prob=0.3), pch=2)
plot(x, dbinom(x, size=5, prob=0.3), pch=3)
plot(x, dbinom(x, size=5, prob=0.3), pch=4)
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch=20, col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch=15, col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch=O, col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch="O", col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch="O", bg="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch="O", bgcol="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch="O", col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch="*", col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch="19", col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="blue")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="hotpink")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="yellow")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="dodgerblue")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="mediumpurple1")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="mediumpurple2")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="mediumpurple3")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="lavender")
plot(x, dbinom(x, size=5, prob=0.3), pch=19, col="mediumpurple3")
x1 <- -2:7
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
x2 <- -5:5
plot(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
par(mfrow=c(2,2))
x1 <- -2:7
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
x2 <- -3:7
plot(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
lines(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
lines(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
par(mfrow=c(2,2))
par(mfrow=c(1,1))
x1 <- -2:7
lines(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
x2 <- -3:7
lines(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
par(mfrow=c(1,1))
x1 <- -2:7
lines(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
plot(x1, x1+2)
par(mfrow=c(1,1))
x1 <- -2:7
lines(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
x2 <- -3:7
lines(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
plot(main="Comp")
plot(xlim=c(-3, 7), main="Comp")
plot(x2, xlim=c(-3, 7), main="Comp")
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
hx
degf <- c(1,3,8,30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="xvalue",
ylab="Density")
plot(x, hx, type="l", lty=4)
plot(x, hx, type="l", lty=10)
plot(x, hx, type="l", lty=20)
plot(x, hx, type="l", lty=40)
plot(x, hx, type="l", lty=50)
plot(x, hx, type="l", lty=1)
plot(x, hx, type="l", lty=1, lwd=2)
plot(x, hx, type="l", lty=1, lwd=3)
plot(x, hx, type="l", lty=1, lwd=1)
plot(x, hx, type="l", lty=1, lwd=0.5)
plot(x, hx, type="l", lty=1, lwd=0.5, col="blue")
plot(x, hx, type="l", lty=1, lwd=0.7, col="blue")
plot(x, hx, type="l", lty=1, lwd=1.5, col="blue")
plot(x, hx, type="l", lty=1, lwd=1, col="blue")
plot(x, hx, type="l", lty=1, lwd=0.8, col="blue")
plot(x, hx, type="l", lty=1, lwd=0.4, col="blue")
plot(x, hx, type="l", lty=1, lwd=0.7, col="blue")
curve(dnorm(x, mean=0, sd=5), xlim=c(-4,4))
curve(dnorm(x, mean=0, sd=1), xlim=c(-4,4))
plot(x, hx, type="l", lty=1, lwd=0.7, col="blue")
curve(dnorm(x, mean=0, sd=1), xlim=c(-4,4))
plot(x, hx, type="l", lty=1, lwd=0.7, col="white")
x1 <- -2:7
lines(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
x2 <- -3:7
lines(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
x1 <- seq(-3,7, length=100)
x1 <- seq(-4,4, length=100)
hx <- dbinom(x, size=5, prob=0.3)
x1 <- seq(0,4, length=100)
hx <- dbinom(x, size=5, prob=0.3)
hx <- dbinom(x1, size=5, prob=0.3)
plot(x1, hx, type="l", lty=1, lwd=0.7, col="mediumpurple3")
x1 <- seq(3,7, length=100)
hx <- dbinom(x1, size=5, prob=0.3)
plot(x1, hx, type="l", lty=1, lwd=0.7, col="mediumpurple3")
plot(x1, hx, type="l", lty=1, lwd=2, col="mediumpurple3")
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
plot(x, hx, type="l", lty=1, lwd=0.7, col="white")
plot(x, hx, type="l", lty=1, lwd=2, col="dodgerblue")
curve(dnorm(x, mean=0, sd=1), xlim=c(-4,4))
curve(dnorm(x, mean=0, sd=1), xlim=c(-4,4), col="hotpink")
curve(dnorm(x, mean=0, sd=1), xlim=c(-4,4), lwd=3, col="hotpink")
plot(x, hx, type="l", lty=1, lwd=4, col="dodgerblue")
plot(x, hx, type="l", lty=1, lwd=2, col="dodgerblue")
curve(dnorm(x, mean=0, sd=1), xlim=c(-4,4), lwd=2, col="hotpink")
curve(dnorm(x, mean=0, sd=1), xlim=c(-4,4), lwd=3, col="hotpink")
x1 <- -2:7
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
x2 <- -3:7
plot(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
x1 <- -2:7
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="mediumpurple3")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="green")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="deeppink1")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
plot(x1, dbinom(x1, size=5, prob=0.3), pch="O", col="deeppink1")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="deeppink1")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="goldenrod1")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="blueviolet")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="dodgerblue")
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="deepskyblue1")
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="navy")
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="blueviolet")
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="salmon")
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="yellowgreen")
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="cadetblue1")
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="paleturquoise1")
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="trquoise2")
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="turquoise2")
x1 <- seq(-2,7,by=0.001)
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="blueviolet")
x1 <- seq(-2,7,by=0.5)
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="blueviolet")
x1 <- seq(-2,7,by=1)
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="blueviolet")
x1 <- -2:7
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="blueviolet")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="turquoise2")
points(x3, dt(x3, df=3), pch=19, col="gold1")
x3 <- -3:7
points(x3, dt(x3, df=3), pch=19, col="gold1")
points(x3, dt(x3, df=3), pch=19, col="orange")
points(x3, dt(x3, df=3), pch=19, col="goldenrod2")
points(x3, dt(x3, df=3), pch=19, col="goldenrod1")
x4 <- -3:7
curve(df(x, 6, 11), xlim=c(0, 10), main="F Distribution")
curve(df(x, 19, 5), xlim=c(0, 10), main="F Distribution")
x1 <- -2:7
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="blueviolet")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="turquoise2")
x3 <- -3:7
points(x3, dt(x3, df=3), pch=19, col="goldenrod1")
x4 <- -3:7
points(x4, df(x4, df1=2, df2=4))
points(x4, df(x4, df1=2, df2=4), col="indianred1")
points(x4, df(x4, df1=2, df2=4), pch=19, col="indianred1")
x5 <- -3:7
points(x5, dgeom(x5, 0.5), pch=19, col="yellowgreen")
points(x5, dgeom(x5, 0.9), pch=19, col="yellowgreen")
x1 <- -2:7
plot(x1, dbinom(x1, size=5, prob=0.3), pch=19, col="blueviolet")
x2 <- -3:7
points(x2, dpois(x2, lambda=5*0.3), pch=19, col="turquoise2")
x3 <- -3:7
points(x3, dt(x3, df=3), pch=19, col="goldenrod1")
x4 <- -3:7
points(x4, df(x4, df1=2, df2=4), pch=19, col="indianred1")
x5 <- -3:7
points(x5, dgeom(x5, 0.9), pch=19, col="yellowgreen")
points(x3, dhyper(x=8, m=10, n=20, k=15))
points(x3, dhyper(x=x3, m=10, n=20, k=15), pch=19, col="lavender")
points(x3, dhyper(x=x3, m=10, n=20, k=15), pch=19, col="thistle")
points(x3, dhyper(x=x3, m=10, n=20, k=15), pch=19, col="thistle1")
points(x3, dhyper(x=x3, m=10, n=20, k=15), pch=19, col="mediumvioletred")
points(x3, dhyper(x=x3, m=10, n=20, k=15), pch=19, col="thistle1")
points(x3, dmultinom(x=x3, size=10, prob=(x3)/10))
dbinom(x=3, size=10, prob=1/5)
dpois(x=3, lambda=10*1/5)
dbinom(x=5, size=20, prob=0.05)
dpois(x=5, lambda=20*0.05)
pbinom(x=3, size=20, prob=0.05)
pbinom(q=3, size=20, prob=0.05)
1-pbinom(q=2, size=20, prob=0.05)
x <- 0:4
heads <- 0:4
prob.heads <- dbimom(x=heads, size=100, prob=1/2)
prob.heads <- dbinom(x=heads, size=100, prob=1/2)
1/16
prob.heads <- dbinom(x=heads, size=4, prob=1/2)
mean(prob.heads)
exp <- heads*prob.heads
exp <- sum(heads*prob.heads)
s <- sqrt(sum(heads^2*prob.heads))
s <- sqrt(sum(heads^2*prob.heads)-exp^2)
dbinom(x=2, size=5, prob=0.05)
1-pbinom(2, 5, 0.05)
dbinom(5,5,0.05)
1-pbinom(14, 20, 1/5)
prob=1/5
size=20
1-pbinom(14, 20, 2/15)
1-pbinom(14, 20, 1/15)
1-pbinom(14, 20, 1/5)
1-pbinom(14, 20, 1/2)
dbinom(8, 8, 0.77)
1-pbinom(4, 8, 0.77)
dbinom(3, 8, 0.77)
pbinom(2, 10, 0.103)
1-pbinom(5, 10, 0.103)
1-pbinom(5, 10, (1-0.103))
pbimom(5, 10, 0.103)
pbinom(5, 10, 0.103)
pbinom(5, 10, (1-0.103))
dbinom(10, 10, 0.103)
1-dbinom(10, 10, 0.103)
dbinom(0, 10, 0.103)
pbinom(5,10, 0.103)
pbinom(3, 7, 0.75)
dbinom(0, 5, 0.521)
1-pbinom(2, 5, 0.521)
1-pbinom(3, 5, 0.521)
pbinom(1, 5, 0.521)
dbinom(2, 5, 0.4)
pbinom(3, 5, 0.4)
1-pbinom(1, 5, 0.4)
pbinom(1, 5, 0.6)
pbinom(1, 5, 0.4)
pbinom(2, 5, 0.4)
dbinom(6, 12, 0.26)
1-pbinom(5, 12, 0.26)
pbinom(4, 12, 0.26)
dbinom(5, 10, 0.53)
1-pbinom(4, 10, 0.53)
1-pbinom(4, 10, 0.47)
1-pbinom(4, 10, 0.53)+1-pbinom(4, 10, 0.47)
pbinom(4, 10, 0.53)
dbinom(5, 18, 0.25)
dbinom(9, 14, 0.63)
pbinom(3, 10, 1/3)
dbinom(12, 20, 0.58)
1-pbinom(2, 5, 0.13)
dbinom(2, 7, 0.14) + dbinom(3, 7, 0.14)
curve(dbinom(x, 4, 0.3), xlim=c(-5, 5))
x <- -5:5
plot(x, dbinom(x, 4, 0.3), pch=19, col="deeppink1")
plot(x, dbinom(x, 4, 0.3), pch=19, col="orchid1")
library(shiny)
q()
getwd()
setwd("/datascience/projects/statisticallyfit/github/
learningprogramming/R/StatisticsIntroUsingR_Crawley")
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/StatisticsIntroUsingR_Crawley")
getwd()
yvals <- read.csv("data/yvalues.csv")
attach(yvals)
hist(y)
hist(yvals)
yvals
attach(yvals)
detach(yvals)
y
detach(yvals)
y
attach(yvals)
y
hist(y)
hist(y, main="")
library(ISwR)
library(ISwR)
getwd()
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/IntroductionToStatisticsWithR_Dalgaard")
library(ISwR)
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/IntroductionToStatisticsWithR")
library(ISwR)
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/StatisticsIntroUsingR_Crawley")
setwd("/home/statisticallyfit")
library(ISwR)
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/StatisticsIntroUsingR_Crawley")
yvals <- read.csv("data/yvalues.csv")
attach(yvals)
detacj(yvals)
detach(yvals)
hist(y)
y
yvals <- read.csv("data/yvalues.csv")
y
hist(y)
y
hist(y)
arithmetic.mean <- function(x) sum(x)/length(x)
arithmetic.mean(y)
sorted <- sort(y)
length(y)
data <- c(1,2,3,4,5)
length(data)/2
sorted[ceiling(length(y)/2)]
sort(y)[ceiling(length(y)/2)]
data <- c(1,2,3,4,5, 6)
length(data)/3
length(data)/2
median <- function(x) {
if(length(x) %%2 == 0)
(sort(x)[ceiling(length(x)/2)] + sort(x)[ceiling(1+length(x)/2)])/2
else
sort(x)[ceiling(length(x)/2)]
}
median(y)
med <- function(x) {
if(length(x) %%2 == 0)
(sort(x)[ceiling(length(x)/2)] + sort(x)[ceiling(1+length(x)/2)])/2
else
sort(x)[ceiling(length(x)/2)]
}
med(y)
y
hist(y)
library(ISwR)
setwd("/home/statisticallyfit")
hist(y)
setwd("/home/statisticallyfit")
hist(y)
q()
library(extrafont)
font_import()
fonts()
pdf("plot_cm.pdf", family="CM Roman", width=5.5, height=5)
curve(dnorm, from=-3, to=3, main="Normal Distribution")
text(x=0, y=0.1, cex=1.5, expression(italic(y == frac(1, sqrt(2 * pi)) *
e ^ {-frac(x^2, 2)} )))
dev.off()
embed_fonts("plot_cm.pdf", outfile="plot_cm_embed.pdf")
library(ggplot2)
q()
hi there
"hi there"
"hi there"
how are you
#make
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/RStats/learneconometrics/AndrewGelman_Multilevel-Hierarchical/c[5] Logistic Regression")
electionData <- read.table("/data/congress/cong3/1992.asc", header=TRUE)
electionData <- read.table("data/congress/cong3/1992.asc", header=TRUE)
View(electionData)
source("4.7_Fitting a series of regressions.R") # where data was cleaned; set the directory to be where this file is
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/RStats/learneconometrics/AndrewGelman_Multilevel-Hierarchical/c[5] Logistic Regression/data/code/Book_Codes/Ch.4")
source("4.7_Fitting a series of regressions.R") # where data was cleaned; set the directory to be where this file is
library("arm")
install.packages("arm")
library("arm")
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/RStats/learneconometrics/AndrewGelman_Multilevel-Hierarchical/c[5] Logistic Regression/data/code/Book_Codes/Ch.4")
source("4.7_Fitting a series of regressions.R") # where data was cleaned; set the directory to be where this file is
source("4.7_Fitting a series of regressions.R") # where data was cleaned; set the directory to be where this file is
source('/datascience/projects/statisticallyfit/github/learningprogramming/R/RStats/learneconometrics/AndrewGelman_Multilevel-Hierarchical/c[5] Logistic Regression/Ch.4/4.7_Fitting a series of regressions.R')
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/RStats/learneconometrics/AndrewGelman_Multilevel-Hierarchical/c[5] Logistic Regression/Ch.4")
source("4.7_Fitting a series of regressions.R") # where data was cleaned; set the directory to be where this file is
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/RStats/learneconometrics/AndrewGelman_Multilevel-Hierarchical/c[5] Logistic Regression/Ch.4")
source("4.7_Fitting a series of regressions.R") # where data was cleaned; set the directory to be where this file is
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/RStats/learneconometrics/AndrewGelman_Multilevel-Hierarchical/c[5] Logistic Regression/Ch.4")
source("4.7_Fitting a series of regressions.R") # where data was cleaned; set the directory to be where this file is
library("arm")
brdata <- read.dta("nes5200_processed_voters_realideo.dta",convert.factors=F)
brdata <- read.dta("nes/nes5200_processed_voters_realideo.dta",convert.factors=F)
brdata <- read.data("nes/nes5200_processed_voters_realideo.dta",convert.factors=F)
brdata <- read.dta("nes\nes5200_processed_voters_realideo.dta",convert.factors=F)
data(swiss)
swiss
setwd("/home/statisticallyfit")
getwd
getwd()
write.dta(swiss, swissfile <- tempfile())
read.dta()
library(foreign)
library(foreign)
library("foreign")
install.packages("foreign")
install.packages("foreign")
swiss
write.dta(swiss, swissfile <- tempfile())
read.dta()
this is my session!
ctab.test <- table(pred=test$pred > 0.02, atRisk=test$atRisk)
library(ggplot2)
setwd("/datascience/projects/statisticallyfit/github/learningprogramming/R/RStats/learneconometrics/Nina_Practical Data Science with R")
load("data/NatalRiskData.rData")
head(sdata)
train <- sdata[sdata$ORIGRANDGROUP <= 5, ]
test <- sdata[sdata$ORIGRANDGROUP > 5, ]
complications <- c("ULD_MECO", "ULD_PRECIP", "ULD_BREECH")
riskfactors <- c("URF_DIAB", "URF_CHYPER", "URF_PHYPER", "URF_ECLAM")
y <- "atRisk"
x <- c("PWGT", "UPREVIS", "CIG_REC", "GESTREC3", "DPLURAL",
complications, riskfactors)
fmla <- paste(y, paste(x, collapse=" + "), sep=" ~ ")
print(fmla)
model <- glm(fmla, data=train, family=binomial(link="logit"))
# Need to specify "type="response"" otherwise predict() returns
# result of logit(y), need to put this response into sigmoid function
train$pred <- predict(model, newdata=train, type="response")
test$pred <- predict(model, newdata=test, type="response")
# Predictions grouped by known outcome
ggplot(data=train, aes(x=pred, color=atRisk, linetype=atRisk)) +
geom_density(size=1)
# Model trade-offs
library(ROCR)
#install.packages("ROCR")
library(grid)
predObj <- prediction(train$pred, train$atRisk)
precObj <- performance(predObj, measure="prec") #precision as function of threshold
recObj <- performance(predObj, measure="rec") # recall as function of threshold
precision <- (precObj@y.values)[[1]]
prec.x <- (precObj@x.values)[[1]]
recall <- (recObj@y.values)[[1]]
# xvalues (thresholds) are same in predObj and recObj
rocFrame <- data.frame(threshold=prec.x, precision=precision, recall=recall)
head(rocFrame)
#Function to plot many stacked plots on one page
nplot <- function(plist) {
n <- length(plist)
grid.newpage()
pushViewport(viewport(layout=grid.layout(n, 1)))
vplayout = function(x, y) {
viewport(layout.pos.row=x, layout.pos.col=y)
}
for (i in 1:n){
print(plist[[i]], vp=vplayout(i, 1))
}
}
# find rate of at-risk births in training set
pnull <- mean(as.numeric(train$atRisk))
#Plot enrichment rate as function of threshold
p1 <- ggplot(rocFrame, aes(x=threshold)) +
geom_line(aes(y=precision/pnull)) +
coord_cartesian(xlim=c(0, 0.05), ylim=c(0, 10))
# Plot recall as function of threshold
p2 <- ggplot(rocFrame, aes(x=threshold)) +
geom_line(aes(y=recall)) +
coord_cartesian(xlim=c(0, 0.05))
nplot(list(p1, p2))
ctab.test <- table(pred=test$pred > 0.02, atRisk=test$atRisk)
ctab.test
precision <- ctab.test[2,2] / sum(ctab.test[2, ])
precision
recall <- ctab.test[2,2] / sum(ctab.test[ ,2])
recall
enrichmentRate <- precision / mean(as.numeric(test$atRisk))
enrichmentRate
coefficients(model)
library(rstan)
pred <- predict(model, newdata=train, type="response")
loglikComponents <- function (y, py){
y*log(py) + (1-y)*log(1-py)
}
residDeviance <- sign(as.numeric(train$atRisk) - pred) *
sqrt(-2*loglikComponents(as.numeric(train$atRisk), pred))
residDeviance
head(residDeviance)
summary(residDeviance)
p1 <- ggplot(rocFrame, aes(x=threshold)) +
geom_line(aes(y=precision/pnull), size=1) +
coord_cartesian(xlim=c(0, 0.05), ylim=c(0, 10))
p2 <- ggplot(rocFrame, aes(x=threshold)) +
geom_line(aes(y=recall), size=1) +
coord_cartesian(xlim=c(0, 0.05))
nplot(list(p1, p2))
